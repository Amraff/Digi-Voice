name: Deploy VoiceBox App

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1   # change if different

      # -----------------------------
      # üì¶ Package & Upload Lambdas
      # -----------------------------
      - name: Package Lambda functions
        run: |
          mkdir -p deploy
          
          # Package each Lambda function properly
          cd lambda
          
          # Handler Lambda
          mkdir -p ../deploy/handler
          cp handler.py ../deploy/handler/
          cd ../deploy/handler
          zip -r ../handler.zip .
          cd ../../lambda
          
          # Get Post Lambda
          mkdir -p ../deploy/get_post
          cp get_post.py ../deploy/get_post/
          cd ../deploy/get_post
          zip -r ../get_post.zip .
          cd ../../lambda
          
          # Convert to Audio Lambda
          mkdir -p ../deploy/convert_to_audio
          cp convert_to_audio.py ../deploy/convert_to_audio/
          cd ../deploy/convert_to_audio
          zip -r ../convert_to_audio.zip .
          cd ../../lambda
          
          # Voices Lambda
          mkdir -p ../deploy/voices
          cp voices.py ../deploy/voices/
          cd ../deploy/voices
          zip -r ../voices.zip .
          cd ../..

      - name: Upload Lambda Zips to S3
        run: |
          aws s3 sync deploy s3://mp3-pollybucket-app-20251809/deploy \
            --exact-timestamps \
            --cache-control "no-cache, no-store, must-revalidate" \
            --expires 0

      # -----------------------------
      # üöÄ Deploy Infra (Terraform)
      # -----------------------------
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Import existing resources
        working-directory: ./terraform
        run: |
          terraform import aws_dynamodb_table.table1 posts || true
          terraform import aws_iam_role.iam_role lambda_functions_role || true
          POLICY_ARN=$(aws iam list-policies --query 'Policies[?PolicyName==`lambda_functions`].Arn' --output text)
          if [ ! -z "$POLICY_ARN" ]; then terraform import aws_iam_policy.iam_policy $POLICY_ARN || true; fi
          terraform import aws_lambda_function.new_posts_lambda PostReader_NewPost || true
          terraform import aws_lambda_function.convert_to_audio PostReader_ConvertToAudio || true
          terraform import aws_lambda_function.get_post PostReader_GetPost || true
          terraform import aws_lambda_function.voices PostReader_Voices || true
          
          # Import SNS resources if they exist
          SNS_TOPIC_ARN=$(aws sns list-topics --query 'Topics[?contains(TopicArn, `polly-app-topic`)].TopicArn' --output text)
          if [ ! -z "$SNS_TOPIC_ARN" ]; then terraform import aws_sns_topic.sns_topic $SNS_TOPIC_ARN || true; fi
          
          # Import CloudWatch Log Groups
          terraform import aws_cloudwatch_log_group.new_post /aws/lambda/PostReader_NewPost || true
          terraform import aws_cloudwatch_log_group.convert_to_audio /aws/lambda/PostReader_ConvertToAudio || true
          terraform import aws_cloudwatch_log_group.get_post /aws/lambda/PostReader_GetPost || true
          terraform import aws_cloudwatch_log_group.voices /aws/lambda/PostReader_Voices || true
          
          # Import API Gateway stage if it exists
          terraform import aws_api_gateway_stage.prod 528y1o1xm3/prod || true
          
          # Import Lambda permissions if they exist
          terraform import aws_lambda_permission.api_gateway_new_post PostReader_NewPost/AllowNewPostInvoke || true
          terraform import aws_lambda_permission.api_gateway_get_post PostReader_GetPost/AllowGetPostInvoke || true
          terraform import aws_lambda_permission.api_gateway_voices PostReader_Voices/AllowVoicesInvoke || true

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      # -----------------------------
      # üåê Deploy Frontend to S3
      # -----------------------------
      - name: Upload Frontend to S3 with cache-busting
        run: |
          aws s3 sync ./website s3://polly-app-static-website-20251809 \
            --delete --exact-timestamps \
            --cache-control "no-cache, no-store, must-revalidate" \
            --expires 0
